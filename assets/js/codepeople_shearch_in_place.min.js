var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.findInternal = function(c, e, m) {
    c instanceof String && (c = String(c));
    for (var p = c.length, q = 0; q < p; q++) {
        var r = c[q];
        if (e.call(m, r, q, c))
            return {
                i: q,
                v: r
            }
    }
    return {
        i: -1,
        v: void 0
    }
}
;
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.SIMPLE_FROUND_POLYFILL = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function(c, e, m) {
    c != Array.prototype && c != Object.prototype && (c[e] = m.value)
}
;
$jscomp.getGlobal = function(c) {
    return "undefined" != typeof window && window === c ? c : "undefined" != typeof global && null != global ? global : c
}
;
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.polyfill = function(c, e, m, p) {
    if (e) {
        m = $jscomp.global;
        c = c.split(".");
        for (p = 0; p < c.length - 1; p++) {
            var q = c[p];
            q in m || (m[q] = {});
            m = m[q]
        }
        c = c[c.length - 1];
        p = m[c];
        e = e(p);
        e != p && null != e && $jscomp.defineProperty(m, c, {
            configurable: !0,
            writable: !0,
            value: e
        })
    }
}
;
$jscomp.polyfill("Array.prototype.find", function(c) {
    return c ? c : function(e, c) {
        return $jscomp.findInternal(this, e, c).v
    }
}, "es6", "es3");
var codepeople_search_in_place_generator = function() {
    function c() {
        try {
            return document.createEvent("TouchEvent"),
            !0
        } catch (b) {
            return !1
        }
    }
    var e = jQuery;
    if ("undefined" == typeof codepeople_search_in_place_generator_flag) {
        codepeople_search_in_place_generator_flag = !0;
        var m = !1, p, q, r = e(".search-in-place-results-container"), v = function(b) {
            var a = e(this).find("a").attr("href"), d;
            if (a) {
                if ("URL"in window) {
                    var u = new URL(a);
                    if (d = u.searchParams.get("highlight"))
                        u.searchParams.delete("highlight"),
                        a = u.toString(),
                        sessionStorage.setItem("highlight", d)
                }
                switch (b.which) {
                case 2:
                    window.open(a, "_blank").trigger("blur");
                    window.focus();
                    break;
                case 3:
                    break;
                default:
                    e(this).find("a").removeAttr("href"),
                    document.location.href = a
                }
            }
        }, t = function(b) {
            m = m || !1;
            if (b || m && 0 == e('input[name="s"]:focus').length && 0 == e(".search-in-place:hover").length && 0 == e(".search-in-place :focus").length)
                e(".search-in-place-close-icon").remove(),
                e(".search-in-place").hide(),
                m = !1
        }, A = function(b) {
            if (b.is(":hidden") || b.closest(".e-n-accordion-item").length || b.closest(".wp-block-themeisle-blocks-accordion-item:not(.open)").length) {
                var a = b.closest(".wp-block-kadence-tab");
                if (a.length && a.is(":hidden") && "KBTabs"in window && (a = a.attr("class").match(/kt\-inner\-tab\-(\d+)/))) {
                    a = a[1];
                    var d = b.closest(".kt-tabs-wrap");
                    if (d.length) {
                        KBTabs.setActiveTab(d[0], a);
                        return
                    }
                }
                a = b.closest(".e-n-accordion-item");
                if (a.length)
                    void 0 == a.attr("open") && a.attr("open", "open");
                else if (a = b.closest(".elementor-accordion-item"),
                a.length && a.find("ul:eq(0)").is(":hidden"))
                    a.find(".elementor-accordion-title:eq(0)").trigger("click");
                else {
                    a = b.closest(".elementor-toggle-item");
                    if (a.length && (a = a.find('[role="button"]:eq(0)'),
                    a.length)) {
                        a.trigger("click");
                        return
                    }
                    a = b.closest(".elementor-tab-content");
                    if (a.length)
                        for (; a.length && a.is(":hidden"); )
                            a.hasClass("elementor-active") || (d = e("#" + a.attr("id").replace("content", "title")),
                            d.length ? d.trigger("click") : a.attr("data-tab") && (d = e('.elementor-tab-title[data-tab="' + a.attr("data-tab") + '"]'),
                            d.length && d.trigger("click"))),
                            b = a.parent(),
                            a = b.closest(".elementor-tab-content");
                    else {
                        a = b.closest(".et_pb_toggle_content");
                        if (a.length && (d = a.siblings(".et_pb_toggle_title"),
                        d.length)) {
                            d.trigger("click");
                            return
                        }
                        if (b.closest(".et-learn-more").length && (d = b.closest(".et-learn-more").find(".heading-more"),
                        d.length)) {
                            d.trigger("click");
                            return
                        }
                        a = b.closest(".sow-accordion-panel-content");
                        if (a.length && (d = a.siblings(".sow-accordion-panel-header-container"),
                        d.length)) {
                            d.find(".sow-accordion-open-button").trigger("click");
                            return
                        }
                        a = b.closest(".answer");
                        if (a.length && (d = a.siblings(".title"),
                        d.length)) {
                            d.trigger("click");
                            return
                        }
                        a = b.closest('.ei-faq,[class$="_faq"]');
                        if (a.length && (d = a.find(".collapsed"),
                        d.length)) {
                            d.trigger("click");
                            return
                        }
                        a = b.closest(".accordion__item");
                        if (a.length && b.find(".accordion__body:hidden") && (d = a.find(".accordion__header"),
                        d.length)) {
                            d.trigger("click");
                            return
                        }
                        a = b.closest(".vc_tta-panel");
                        a.length ? a.addClass("active vc_active") : (a = b.closest(".wp-block-themeisle-blocks-accordion-item"),
                        a.length && a.find(".wp-block-themeisle-blocks-accordion-item__title").trigger("click"))
                    }
                }
            }
        }, w = function(b) {
            e(".search-in-place-mark-active").removeClass("search-in-place-mark-active");
            e(b).addClass("search-in-place-mark-active");
            A(b);
            var a = b.offset().top - window.innerHeight / 2;
            setTimeout(function() {
                window.scrollTo({
                    top: a,
                    left: 0,
                    behavior: "smooth"
                })
            }, 100)
        }, k = function() {
            e("[data-disable-enter-key]").on("keypress", function(b) {
                if (13 === b.keyCode)
                    return b.preventDefault(),
                    b.stopPropagation(),
                    !1
            });
            e("[data-search-in-page]").data("enter-counter", 0).on("click", function() {
                e(this).data("enter-counter", 0)
            }).closest("form").on("submit", function(b) {
                b.preventDefault();
                b.stopPropagation();
                b = e("[data-search-in-page]", this);
                var a = b.data("enter-counter")
                  , d = e(".search-in-place-mark:eq(" + a + ")");
                d.length ? (w(d),
                b.data("enter-counter", a + 1)) : b.data("enter-counter", 0);
                t(!0);
                return !1
            });
            if (jQuery.fn.on)
                e(document).on("mouseover mouseout", ".search-in-place>.item", function(b) {
                    e(this).toggleClass("active")
                }).on("mousedown", ".search-in-place>.item", v).on("mousedown", ".search-in-place>.label.more", v);
            else
                e(".search-in-place>.item").live("mouseover mouseout", function(b) {
                    e(this).toggleClass("active")
                }).live("mousedown", v).live("mousedown", ".search-in-place>.label.more", v)
        };
        k.prototype = {
            active: null,
            search: "",
            source: "",
            config: {
                min: codepeople_search_in_place.char_number,
                image_width: 50,
                image_height: 50,
                colors: "highlight_colors"in codepeople_search_in_place ? codepeople_search_in_place.highlight_colors : "#B5DCE1 #F4E0E9 #D7E0B1 #F4D9D0 #D6CDC8 #F4E3C9 #CFDAF0 #F4EFEC".split(" "),
                areas: "areas"in codepeople_search_in_place ? codepeople_search_in_place.areas : "div.hentry #content #main div.content #middle #container #wrapper article .elementor body".split(" ")
            },
            autohide: function() {
                function b(a) {
                    var b = e(a).next('[name="cpsp-autocomplete"]');
                    b.length && (clearTimeout(q),
                    q = setTimeout(function() {
                        b.show();
                        b[0].scrollLeft = a.scrollLeft
                    }, 10),
                    b.hide())
                }
                var a = this
                  , d = 'input[name="s"]';
                "own_only"in codepeople_search_in_place && 1 * codepeople_search_in_place.own_only && (d += "[data-search-in-place]");
                e(document).on("keydown", d, function(a) {
                    if (9 == a.keyCode && e(".search-in-place:visible").length)
                        return a.preventDefault(),
                        a.stopPropagation(),
                        e(".search-in-place:visible a:first").focus(),
                        !1
                });
                e(document).on("keydown input keyup focus", d, function(a) {
                    b(a.target)
                });
                e(document).on("input keyup focus", d, function(b) {
                    var d = e(this)
                      , f = d.val();
                    if (!("key"in b && "Escape" == b.key) && (1 != e(b.currentTarget).data("search-in-page") || "focus" != b.type && 13 !== b.keyCode)) {
                        if (0 == e(".search-in-place-close-icon").length && !d.data("search-in-page") && c()) {
                            var g = e('<span class="search-in-place-close-icon"></span>');
                            d.after(g);
                            var n = d.offset()
                              , u = d.outerWidth() - 5
                              , l = d.outerHeight()
                              , y = Math.min(g.height(), l - 5)
                              , k = Math.min(g.width(), y);
                            g.height(y);
                            g.width(k);
                            g.offset({
                                top: n.top + (l - y) / 2,
                                left: n.left + (u - k)
                            })
                        }
                        d.attr("autocomplete", "off");
                        a.checkString(f) ? (setTimeout(function() {
                            a.getResults(d)
                        }, 500),
                        m = !0) : (a.clearAutocomplete(d),
                        e(".search-in-place").hide(),
                        m = !1);
                        "keyup" == b.type && 39 == b.keyCode && a.fromAutocomplete(d)
                    }
                });
                e(document).on("click", ".search-in-place-close-icon", function(a) {
                    a.stopPropagation();
                    a.preventDefault();
                    t(!0)
                });
                e(document).on("mouseover", ":not(.search-in-place, .search-in-place *)", function() {
                    c() || setTimeout(t, 150)
                });
                e(document).on("blur", 'input[name="s"]', function() {
                    var a = e(this)
                      , b = a.data("background-color");
                    "undefined" != typeof b && a.css("background-color", b);
                    e('[name="cpsp-autocomplete"]').remove()
                });
                e(document).on("click", ':not(input[name="s"])', function() {
                    setTimeout(t, 150)
                });
                e(document).on("keyup", function(a) {
                    "Escape" == a.key && t(!0)
                })
            },
            checkString: function(b) {
                return this.config.min <= b.length
            },
            getResults: function(b) {
                function a(a) {
                    "object" == typeof a && ("result"in a && d.displayResult(a.result, f, c),
                    "autocomplete"in a && a.autocomplete.length ? d.autocomplete(a.autocomplete[0], b) : d.clearAutocomplete(b))
                }
                var d = this
                  , c = b.data("search-in-page") ? "source" : "website";
                if ("website" == c && !r.length || "source" == c && void 0 == b.data("no-popup")) {
                    var h = b.offset()
                      , f = e(".search-in-place")
                      , g = b.outerWidth();
                    h = {
                        left: h.left,
                        top: parseInt(h.top) + b.outerHeight() + 5
                    };
                    if (d.search == b.val() && f.length && d.source == c) {
                        f.show().width(g).offset(h);
                        return
                    }
                    f.remove();
                    f = e('<div class="search-in-place"></div>');
                    f.appendTo("body");
                    f.width(g).offset(h);
                    d.displayLoading(f)
                }
                d.search = b.val();
                d.source = c;
                "source" == c ? (d.exclude_hidden = b.data("exclude-hidden") || 0,
                g = d.search.replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " "),
                g = "operator"in codepeople_search_in_place && "or" != codepeople_search_in_place.operator ? [g] : g.split(" "),
                e(".search-in-place-mark").each(function() {
                    var a = e(this).parent();
                    e(this).contents().filter(function() {
                        return 3 === this.nodeType
                    }).unwrap();
                    a[0] = a[0].normalize()
                }),
                g = z.highlightTerms(g),
                void 0 == b.data("no-popup") && (a(g),
                e(".search-in-place-more").remove(),
                e(".search-in-place .title a").on("mousedown", function(a) {
                    a.preventDefault();
                    a.stopPropagation();
                    b.trigger("blur");
                    w(e(e(a.target).attr("href")));
                    t(!0)
                }))) : (g = {
                    s: d.search,
                    action: "search_in_place"
                },
                "lang"in codepeople_search_in_place && (g.lang = codepeople_search_in_place.lang),
                d.active && d.active.abort(),
                d.active = jQuery.ajax({
                    url: atob(codepeople_search_in_place.root) + "admin-ajax.php",
                    data: g,
                    cache: !0,
                    dataType: "json",
                    success: function(b) {
                        a(b)
                    }
                }))
            },
            autocomplete: function(b, a) {
                var d = a.data("background-color") || a.css("background-color")
                  , c = function(a) {
                    if (a) {
                        if ("transparent" === a.toLowerCase())
                            return [0, 0, 0, 0];
                        if ("#" === a[0])
                            return 7 > a.length && (a = "#" + a[1] + a[1] + a[2] + a[2] + a[3] + a[3] + (4 < a.length ? a[4] + a[4] : "")),
                            [parseInt(a.substr(1, 2), 16), parseInt(a.substr(3, 2), 16), parseInt(a.substr(5, 2), 16), 7 < a.length ? parseInt(a.substr(7, 2), 16) / 255 : 1];
                        if (-1 === a.indexOf("rgb")) {
                            var b = document.body.appendChild(document.createElement("fictum"));
                            b.style.color = "rgb(1, 2, 3)";
                            if ("rgb(1, 2, 3)" !== b.style.color)
                                return;
                            b.style.color = a;
                            if ("rgb(1, 2, 3)" === b.style.color || "" === b.style.color)
                                return;
                            a = getComputedStyle(b).color;
                            document.body.removeChild(b)
                        }
                        if (0 === a.indexOf("rgb"))
                            return -1 === a.indexOf("rgba") && (a += ",1"),
                            a.match(/[\.\d]+/g).map(function(a) {
                                return +a
                            })
                    }
                }(a.css("color"))
                  , h = a.clone()
                  , f = {
                    position: "absolute",
                    background: d,
                    "border-color": "transparent",
                    "box-shadow": "none",
                    zIndex: 1
                };
                h.removeAttr("placeholder").removeAttr("required");
                "auto" == a.css("zIndex") && a.css("zIndex", 10);
                "static" == a.css("position") && a.css("position", "relative");
                a.data("background-color", d);
                c && (c[3] = .5,
                f.color = "rgba(" + c.join(",") + ")");
                e('[name="cpsp-autocomplete"]').remove();
                a.css("backgroundColor", "transparent").after(h.attr("name", "cpsp-autocomplete").val(b).css(f));
                h.width(a.width());
                h.height(a.height());
                h.offset(a.offset());
                h[0].scrollLeft = a[0].scrollLeft
            },
            fromAutocomplete: function(b) {
                var a = b.next('[name="cpsp-autocomplete"]');
                a.length && a.val().length && b.val(a.val())
            },
            clearAutocomplete: function(b) {
                b = b.next('[name="cpsp-autocomplete"]');
                b.length && b.val("")
            },
            displayResult: function(b, a, d) {
                var c = this, h = "", f = 0, g;
                for (g in b) {
                    h += '<div class="label">' + ("source" != g ? g : "") + "</div>";
                    var n = b[g]
                      , x = n.length;
                    f += x;
                    for (var l = 0; l < x; l++)
                        h += '<div class="item ' + (l + 1 == x ? "last" : "") + '">',
                        h = n[l].thumbnail ? h + ('<div class="thumbnail"><img src="' + n[l].thumbnail + '" style="visibility:hidden;float:left;position:absolute;" /></div><div class="data" style="margin-left:' + (c.config.image_width + 5) + "px;min-height:" + c.config.image_height + 'px;">') : h + '<div class="data">',
                        h += '<span class="title"><a href="' + n[l].link + '">' + ("source" == d && n[l].resume ? n[l].resume : n[l].title) + "</a></span>",
                        "source" == d && n[l].resume ? h += '<span class="resume">' + n[l].title + "</span>" : "source" != d && n[l].resume && (h += '<span class="resume">' + n[l].resume + "</span>"),
                        n[l].author && (h += '<span class="author">' + n[l].author + "</span>"),
                        n[l].date && (h += '<span class="date">' + n[l].date + "</span>"),
                        h += '</div><div style="clear:both;"></div></div>'
                }
                h += '<div class="label more">';
                f ? 1 * codepeople_search_in_place.result_number <= f && (b = codepeople_search_in_place.home,
                b += -1 == b.indexOf("?") ? "?" : "&",
                "lang"in codepeople_search_in_place && (b += "lang=" + codepeople_search_in_place.lang + "&"),
                h += '<a class="search-in-place-more" href="' + b + "s=" + this.search + '&submit=Search">' + codepeople_search_in_place.more + " &gt;</a>") : h += codepeople_search_in_place.empty;
                h += "</div>";
                if (a)
                    a.html(h).find(".thumbnail img").on("load", function() {
                        var a = c.imgSize(this);
                        e(this).width(a.w).height(a.h).css("visibility", "visible")
                    });
                else
                    r.length && (r.html(h),
                    r.find(".thumbnail img").css("visibility", "visible"));
                clearTimeout(p);
                p = setTimeout(function() {
                    if ("codepeople_search_in_place"in window && "screen_reader_alert"in codepeople_search_in_place)
                        try {
                            var b = e(a || r);
                            if (0 == b.find(".search-in-place-alert").length) {
                                var d = b.find(".item").length
                                  , c = codepeople_search_in_place.screen_reader_alert + " " + d + " " + (1 == d ? codepeople_search_in_place.screen_reader_alert_result_single : codepeople_search_in_place.screen_reader_alert_result_multiple);
                                b.find(".item").length && (c += ". " + codepeople_search_in_place.screen_reader_alert_instructions);
                                b.prepend('<label class="search-in-place-alert" role="alert">' + c + "</label>")
                            }
                        } catch (C) {}
                }, 1200)
            },
            imgSize: function(b) {
                b = e(b);
                var a = b.width();
                b = b.height();
                if (a > this.config.image_width) {
                    var d = this.config.image_width;
                    var c = d / a * b;
                    a = d;
                    b = c
                }
                b > this.config.image_height && (c = this.config.image_height,
                a *= c / b,
                b = c);
                return {
                    w: a,
                    h: b
                }
            },
            displayLoading: function(b) {
                b.append('<div class="label"><div class="loading"></div></div>')
            },
            highlightTerms: function(b) {
                var a = this, d, c = 0, h = {
                    result: {
                        source: []
                    },
                    autocomplete: []
                };
                innerHighlight = function(a, b, d) {
                    var c = 0;
                    if (3 == b.nodeType) {
                        var l = b.data
                          , f = a.toUpperCase()
                          , g = replaceTildes(l).toUpperCase().indexOf(f)
                          , n = a.length
                          , m = (Math.max("codepeople_search_in_place"in window && "summary_length"in codepeople_search_in_place ? 1 * codepeople_search_in_place.summary_length : 20, n) - n) / 2;
                        f = g;
                        var k = l.length - (g + n);
                        if (0 <= g && 0 == e(b).closest(".search-in-place-mark").length && (b = replaceNodeContent(b, a, g),
                        !1 !== b)) {
                            f < k ? k = f < m ? 2 * m - f : f = m : k < m ? f = 2 * m - k : k = f = m;
                            f = Math.max(0, g - ("search_in_place_characters_before"in window ? search_in_place_characters_before : f));
                            k = Math.min(g + n + ("search_in_place_characters_after"in window ? search_in_place_characters_after : k), l.length);
                            for (; f && /[^\W]/.test(l.charAt(f)); )
                                f--;
                            for (; k < l.length && /[^\W]/.test(l.charAt(k)); )
                                k++;
                            h.autocomplete.length || (c = e('[name="s"][data-autocomplete="1"]:focus'),
                            c.length && (c = c.val(),
                            c = new RegExp(c.replace(/[.*+?^${}()|[\]\\]/g, "\\$&") + "\\s*[^\\s]*","i"),
                            c = l.match(c),
                            null != c && h.autocomplete.push(c[0])));
                            h.result.source.push({
                                link: "#" + b,
                                title: d || a,
                                resume: l.substring(f, k) + '<span class="ellipsis">[...]</span>'
                            });
                            c = 1
                        }
                    } else
                        possibleTextNode(b) && lookupTextNodes(b, a, d);
                    return c
                }
                ;
                replaceTildes = function(a) {
                    return /[\u0600-\u06ff]|[\u0750-\u077f]|[\ufb50-\ufc3f]|[\ufe70-\ufefc]|[\u0200]|[\u00A0]/g.test(a) || /[\u3040-\u30ff\u3400-\u4dbf\u4e00-\u9fff\uf900-\ufaff\uff66-\uff9f\u3131-\uD79D]/g.test(a) || /[\u0400-\u04FF]/g.test(a) ? a : a.normalize("NFD").replace(/[\u0300-\u036f]/g, "")
                }
                ;
                replaceNodeContent = function(b, g, h) {
                    try {
                        if (a.exclude_hidden && e(b).parent().is(":hidden"))
                            return !1;
                        var f = document.createElement("mark")
                          , l = b.splitText(h);
                        l.splitText(g.length);
                        var k = l.cloneNode(!0);
                        c++;
                        var m = "search-in-page-" + c;
                        f.setAttribute("id", m);
                        f.setAttribute("style", "background-color:" + d);
                        f.setAttribute("class", "search-in-place-mark");
                        f.appendChild(k);
                        l.parentNode.replaceChild(f, l);
                        return m
                    } catch (B) {
                        return !1
                    }
                }
                ;
                possibleTextNode = function(a) {
                    return 1 == a.nodeType && a.childNodes && !/(script|style)/i.test(a.tagName)
                }
                ;
                lookupTextNodes = function(a, b, c) {
                    for (var d = 0; d < a.childNodes.length; d++)
                        d += innerHighlight(b, a.childNodes[d], c)
                }
                ;
                e.each(a.config.areas, function(c, g) {
                    g = e(g);
                    g.length && g.each(function() {
                        var c = this;
                        e.each(b, function(b, e) {
                            e.length >= codepeople_search_in_place.char_number && (d = a.config.colors[b % a.config.colors.length],
                            innerHighlight(replaceTildes(e), c, e))
                        })
                    })
                });
                return h
            }
        };
        var z = new k;
        k = null;
        if (1 * codepeople_search_in_place.highlight || 1 * codepeople_search_in_place.highlight_resulting_page) {
            if (codepeople_search_in_place.terms && 0 < codepeople_search_in_place.terms.length)
                k = codepeople_search_in_place.terms;
            else
                try {
                    k = (new URLSearchParams(window.location.search)).get("highlight"),
                    !k && "sessionStorage"in window && (k = sessionStorage.getItem("highlight")),
                    k && (k = String(k).trim()) && (k = [k])
                } catch (b) {}
            k && (z.highlightTerms(k),
            k = e(".search-in-place-mark:eq(0)"),
            k.length && w(k))
        }
        1 * codepeople_search_in_place.identify_post_type && (e(".type-post").prepend('<div class="search-in-place-type-post">' + codepeople_search_in_place.post_title + "</div>"),
        e(".type-page").prepend('<div class="search-in-place-type-page">' + codepeople_search_in_place.page_title + "</div>"));
        z.autohide()
    }
};
jQuery(codepeople_search_in_place_generator);
jQuery(window).on("load", codepeople_search_in_place_generator);
jQuery(window).on("load", function() {
    setTimeout(function() {
        try {
            var c = (new URLSearchParams(window.location.search)).get("highlight");
            !c && "sessionStorage"in window && (c = sessionStorage.getItem("highlight"),
            sessionStorage.removeItem("highlight"));
            if (!jQuery(".search-in-place-mark.search-in-place-mark-active:visible").length && c && (c = String(c).trim(),
            !window.find(c))) {
                c = c.replace(/\s+/g, " ").split(" ");
                for (var e in c)
                    if (window.find(c[e]))
                        break
            }
        } catch (m) {
            console.log(m)
        }
    }, 1E3)
});
